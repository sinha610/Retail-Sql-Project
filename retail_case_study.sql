-- Retail Analytics SQL Notebook
-- This script sequentially analyzes retail sales data step by step.

-- Step 1: Identifying and Removing Duplicate Transactions
SELECT TRANSACTIONID, COUNT(*)
FROM SALES_TRANSACTION
GROUP BY TRANSACTIONID
HAVING COUNT(*) > 1;

CREATE TABLE SALES_TRANSACTION_DISTINCT AS
SELECT DISTINCT * FROM SALES_TRANSACTION;

DROP TABLE SALES_TRANSACTION;
ALTER TABLE SALES_TRANSACTION_DISTINCT RENAME TO SALES_TRANSACTION;
SELECT * FROM SALES_TRANSACTION;

-- Step 2: Checking for Price Discrepancies Across Tables
SELECT T.TRANSACTIONID, T.PRICE AS TRANSACTIONPRICE, I.PRICE AS INVENTORYPRICE
FROM SALES_TRANSACTION AS T
JOIN PRODUCT_INVENTORY AS I 
ON T.PRODUCTID = I.PRODUCTID
WHERE T.PRICE <> I.PRICE;

UPDATE SALES_TRANSACTION T
SET PRICE = (SELECT I.PRICE FROM PRODUCT_INVENTORY AS I 
WHERE T.PRODUCTID = I.PRODUCTID)
WHERE T.PRODUCTID IN (SELECT PRODUCTID FROM PRODUCT_INVENTORY AS I WHERE T.PRICE <> I.PRICE);

SELECT * FROM SALES_TRANSACTION;

-- Step 3: Handling Null Values in Customer Profiles
SELECT COUNT(*) FROM CUSTOMER_PROFILES
WHERE CUSTOMERID IS NULL OR AGE IS NULL OR GENDER IS NULL OR LOCATION IS NULL OR JOINDATE IS NULL;

UPDATE CUSTOMER_PROFILES
SET LOCATION = 'Unknown'
WHERE LOCATION IS NULL;

SELECT * FROM CUSTOMER_PROFILES;

-- Step 4: Standardizing Date Format in Sales Transactions
CREATE TABLE TRANSAC_UPDT AS 
SELECT *, CAST(TRANSACTIONDATE AS DATE) TRANSACTIONDATE_UPDATED
FROM SALES_TRANSACTION;

DROP TABLE SALES_TRANSACTION;
ALTER TABLE TRANSAC_UPDT RENAME TO SALES_TRANSACTION;
SELECT * FROM SALES_TRANSACTION;

-- Step 5: Summarizing Sales and Quantity Sold Per Product
SELECT PRODUCTID, SUM(QUANTITYPURCHASED) AS TOTALUNITSSOLD, SUM(QUANTITYPURCHASED * PRICE) AS TOTALSALES
FROM SALES_TRANSACTION
GROUP BY PRODUCTID
ORDER BY TOTALSALES DESC;

-- Step 6: Analyzing Customer Purchase Frequency
SELECT CUSTOMERID, COUNT(*) AS NUMBEROFTRANSACTIONS
FROM SALES_TRANSACTION
GROUP BY CUSTOMERID
ORDER BY NUMBEROFTRANSACTIONS DESC;

-- Step 7: Evaluating Product Category Performance
SELECT I.CATEGORY, SUM(T.QUANTITYPURCHASED) AS TOTALUNITSSOLD, SUM(I.PRICE * T.QUANTITYPURCHASED) AS TOTALSALES
FROM SALES_TRANSACTION T
JOIN PRODUCT_INVENTORY I 
ON T.PRODUCTID = I.PRODUCTID
GROUP BY I.CATEGORY
ORDER BY TOTALSALES DESC;

-- Step 8: Identifying Top 10 Best-Selling Products
SELECT PRODUCTID, SUM(PRICE * QUANTITYPURCHASED) AS TOTALREVENUE
FROM SALES_TRANSACTION
GROUP BY PRODUCTID
ORDER BY TOTALREVENUE DESC LIMIT 10;

-- Step 9: Identifying Bottom 10 Least-Selling Products
SELECT PRODUCTID, SUM(QUANTITYPURCHASED) AS TOTALUNITSSOLD
FROM SALES_TRANSACTION
GROUP BY PRODUCTID
HAVING TOTALUNITSSOLD > 0
ORDER BY TOTALUNITSSOLD ASC LIMIT 10;

-- Step 10: Understanding Sales Trends Over Time
SELECT CAST(TRANSACTIONDATE AS DATE) AS DATETRANS, COUNT(*) AS TRANSACTION_COUNT, SUM(QUANTITYPURCHASED) AS TOTALUNITSSOLD, SUM(PRICE * QUANTITYPURCHASED) AS TOTALSALES
FROM SALES_TRANSACTION
GROUP BY DATETRANS
ORDER BY DATETRANS DESC;

-- Step 11: Month-over-Month Growth Analysis
SELECT MONTH_NO AS MONTH, TOTAL_SALES, LAG(TOTAL_SALES) OVER (ORDER BY MONTH_NO) AS PREVIOUS_MONTH_SALES, ((TOTAL_SALES - LAG(TOTAL_SALES) OVER (ORDER BY MONTH_NO)) / LAG(TOTAL_SALES) OVER (ORDER BY MONTH_NO)) * 100 AS MOM_GROWTH_PERCENTAGE
FROM (
    SELECT MONTH(TRANSACTIONDATE) AS MONTH_NO, SUM(PRICE * QUANTITYPURCHASED) AS TOTAL_SALES
    FROM SALES_TRANSACTION
    GROUP BY MONTH(TRANSACTIONDATE)
) A
ORDER BY MONTH_NO;

-- Step 12: Identifying High-Frequency Customers
SELECT CUSTOMERID, COUNT(CUSTOMERID) AS NumberOfTransactions, SUM(PRICE * QUANTITYPURCHASED) AS TotalSpent
FROM SALES_TRANSACTION
GROUP BY CUSTOMERID
HAVING NumberOfTransactions > 10 AND TotalSpent > 1000
ORDER BY TotalSpent DESC;

-- Step 13: Identifying Low-Frequency Customers
SELECT CUSTOMERID, COUNT(CUSTOMERID) AS NumberOfTransactions, SUM(PRICE * QUANTITYPURCHASED) AS TotalSpent
FROM SALES_TRANSACTION
GROUP BY CUSTOMERID
HAVING COUNT(CUSTOMERID) <= 2
ORDER BY NumberOfTransactions ASC, TotalSpent DESC;

-- Step 14: Understanding Repeat Customer Behavior
SELECT CUSTOMERID, PRODUCTID, COUNT(CUSTOMERID) AS TimesPurchased
FROM SALES_TRANSACTION
GROUP BY CUSTOMERID, PRODUCTID
HAVING COUNT(CUSTOMERID) > 1
ORDER BY TimesPurchased DESC;

-- Step 15: Measuring Customer Loyalty Over Time
SELECT CUSTOMERID, MIN(DATE_UPDT) FIRSTPURCHASE, MAX(DATE_UPDT) LASTPURCHASE, DATEDIFF(MAX(DATE_UPDT), MIN(DATE_UPDT)) AS DAYSBETWEENPURCHASES
FROM (
    SELECT CUSTOMERID, STR_TO_DATE(TRANSACTIONDATE, '%Y-%m-%d') AS DATE_UPDT
    FROM SALES_TRANSACTION
) A
GROUP BY CUSTOMERID
HAVING DATEDIFF(MAX(DATE_UPDT), MIN(DATE_UPDT)) > 0
ORDER BY DAYSBETWEENPURCHASES DESC;

-- Step 16: Customer Segmentation Based on Purchase Quantity
CREATE TABLE CUSTOMER_SEG AS 
SELECT CUSTOMERID, 
    CASE WHEN TOTALQUANTITY > 30 THEN 'HIGH'
         WHEN TOTALQUANTITY BETWEEN 10 AND 30 THEN 'MED'
         WHEN TOTALQUANTITY BETWEEN 1 AND 10 THEN 'LOW'
         ELSE 'NONE' END AS CUSTOMERSEGMENT
FROM (
    SELECT C.CUSTOMERID, SUM(S.QUANTITYPURCHASED) AS TOTALQUANTITY
    FROM CUSTOMER_PROFILES C
    JOIN SALES_TRANSACTION S ON C.CUSTOMERID = S.CUSTOMERID
    GROUP BY C.CUSTOMERID
) AS TQ;

SELECT CUSTOMERSEGMENT, COUNT(*)
FROM CUSTOMER_SEG
GROUP BY CUSTOMERSEGMENT;
